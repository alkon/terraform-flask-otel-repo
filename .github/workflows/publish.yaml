name: Publish and deploy the Python App & Helm Chart

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual trigger

jobs:

  build-and-publish:
    runs-on: self-hosted
    # needs: lint
    # needs: [lint, test] # Uncomment to reactivate both lint and test

    permissions:
      contents: read
      packages: write # Crucial for pushing Docker images and Helm charts to GHCR
      id-token: write

    outputs:
      chart_name: ${{ steps.extract_metadata_action.outputs.name }} # Access output from the custom action
      # This is now correctly reflecting the Docker image tag (which is appVersion)
      image_tag: ${{ steps.extract_metadata_action.outputs.app_version }}
      base_chart_version: ${{ steps.extract_metadata_action.outputs.base_version }} # This is the Helm chart's own version
      argocd_app_name: ${{ steps.extract_metadata_action.outputs.app_name }}
      repository_owner: ${{ github.repository_owner }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT_LAST }}

      - name: Extract Chart Metadata
        id: extract_metadata_action # Assign an ID to the custom action step
        uses: ./.github/actions/extract-chart-metadata
        with:
          chart-path: './k8s' # Pass the base path to your chart directory

      - name: Build and Push Docker Image to GHCR
        uses: docker/build-push-action@v6
        with:
          context: ./app
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/flask-app:${{ steps.extract_metadata_action.outputs.app_version }}
          no-cache: false # enable cache for faster builds

      # Debug step - remove later
      - name: Inspect built image and check CMD
        run: |
          IMAGE=ghcr.io/${{ github.repository_owner }}/flask-app:${{ steps.extract_metadata_action.outputs.app_version }}

          echo "Pulling image: $IMAGE"
          docker pull "$IMAGE"

          echo "Inspecting image config..."
          CMD=$(docker inspect "$IMAGE" | jq -r '.[0].Config.Cmd | @sh')

          if [ "$CMD" == "null" ] || [ -z "$CMD" ]; then
            echo "ERROR: CMD not defined in the image!"
            exit 1
          else
            echo "CMD found in image: $CMD"
          fi    

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.18.0

      - name: Helm Registry Login (OCI)
        run: |
          echo "${{ secrets.GH_PAT_LAST }}" | helm registry login ghcr.io --username ${{ github.repository_owner }} --password-stdin    

      - name: Package & Push Helm Chart to GHCR OCI
        run: |
          CHART_DIR="./k8s/helm-charts/${{ steps.extract_metadata_action.outputs.chart_directory }}"
          CHART_NAME="${{ steps.extract_metadata_action.outputs.name }}"
          CHART_VERSION="${{ steps.extract_metadata_action.outputs.base_version }}"

          EXPECTED_CHART_PACKAGE_FILENAME="${CHART_NAME}-${CHART_VERSION}.tgz"

          echo "Packaging Helm chart from: $CHART_DIR"
          echo "Expected packaged filename: $EXPECTED_CHART_PACKAGE_FILENAME"

          helm package "$CHART_DIR" --destination .

          if [ ! -f "$EXPECTED_CHART_PACKAGE_FILENAME" ]; then
            echo "Error: Helm package '$EXPECTED_CHART_PACKAGE_FILENAME' not found after packaging."
            exit 1
          fi

          GHCR_OCI_TARGET="oci://ghcr.io/${{ github.repository_owner }}"
          echo "Pushing Helm chart '$EXPECTED_CHART_PACKAGE_FILENAME' to GHCR OCI Repository: $GHCR_OCI_TARGET"
          helm push "$EXPECTED_CHART_PACKAGE_FILENAME" "$GHCR_OCI_TARGET" --debug
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::841162669220:role/GitHubActionsTerraformRole
          aws-region: us-east-1

      - name: Terraform Init
        working-directory: infra/terraform
        run: terraform init

      - name: Retrieve Argo CD Admin Password
        id: get_admin_password # ID to reference output
        run: |
          ARGOCD_ADMIN_PASSWORD=$(kubectl get secret argocd-initial-admin-secret -n argocd -o jsonpath="{.data.password}" | base64 --decode)
          echo "admin_password=$ARGOCD_ADMIN_PASSWORD" >> "$GITHUB_OUTPUT"
          echo "::add-mask::$ARGOCD_ADMIN_PASSWORD" # Mask the password in logs     

      - name: Restart Argo CD Server for Config Reload and Wait
        run: |
          echo "Restarting argocd-server pods to ensure ConfigMap changes are applied..."
          kubectl rollout restart deployment argocd-server -n argocd
          echo "Waiting for argocd-server deployment to be ready..."
          kubectl rollout status deployment/argocd-server -n argocd --timeout=5m
          echo "Argo CD server deployment is ready."

      - name: Export TF_VARS only
        shell: bash
        run: |
          CHART_NAME="${{ steps.extract_metadata_action.outputs.name }}"
          CHART_VERSION="${{ steps.extract_metadata_action.outputs.base_version }}"
          IMAGE_VERSION="${{ steps.extract_metadata_action.outputs.app_version }}"
          REPO_OWNER="${{ github.repository_owner }}"
          
          # Get the password from the output of the 'get_admin_password' step
          ARGOCD_PASSWORD="${{ steps.get_admin_password.outputs.admin_password }}"
          
          # Construct TF_VARS to include ALL variables, including Argo CD auth
          export TF_VARS="-var=k3d_cluster_name=tf-cluster \
            -var=github_repo_owner=$REPO_OWNER \
            -var=helm_chart_name=$CHART_NAME \
            -var=helm_chart_version=$CHART_VERSION \
            -var=docker_image_tag=$IMAGE_VERSION \
            -var=docker_image_repo=ghcr.io \
            -var=argocd_username=admin \
            -var=argocd_password=$ARGOCD_PASSWORD \
            -var=argocd_server=localhost:30080 \
            -var=argocd_insecure=true"
          
            echo "TF_VARS content:"
            echo "$TF_VARS"
          
            echo "TF_VARS=${TF_VARS}" >> "$GITHUB_ENV"

      - name: Terraform Apply Infra Only (without Argo CD App)
        working-directory: infra/terraform
        shell: bash
        run: |
          echo "TF_VARS: $TF_VARS"
          terraform apply -auto-approve -var="enable_argocd_app=false" $TF_VARS

      - name: Terraform Apply Argo CD App
        working-directory: infra/terraform
        shell: bash
        env:
#          TF_VAR_argocd_auth_token: ${{ secrets.ARGOCD_TOKEN }}
          TF_VAR_argocd_username: "admin"
          TF_VAR_argocd_password: ${{ steps.get_admin_password.outputs.admin_password }}
          TF_VAR_argocd_server: "localhost:30080"
          TF_VAR_argocd_insecure: "true"
        run: |
          echo "TF_VARS: $TF_VARS"
          terraform apply -auto-approve -var="enable_argocd_app=true" $TF_VARS
