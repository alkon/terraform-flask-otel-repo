name: Publish and deploy the Python App & Helm Chart

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual trigger

jobs:

  build-and-publish:
    runs-on: self-hosted
    # needs: lint
    # needs: [lint, test] # Uncomment to reactivate both lint and test

    permissions:
      contents: read
      packages: write # Crucial for pushing Docker images and Helm charts to GHCR

    outputs:
      chart_name: ${{ steps.extract_metadata_action.outputs.name }} # Access output from the custom action
      # This is now correctly reflecting the Docker image tag (which is appVersion)
      image_tag: ${{ steps.extract_metadata_action.outputs.app_version }}
      base_chart_version: ${{ steps.extract_metadata_action.outputs.base_version }} # This is the Helm chart's own version
      argocd_app_name: ${{ steps.extract_metadata_action.outputs.app_name }}
      repository_owner: ${{ github.repository_owner }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Extract Chart Metadata
        id: extract_metadata_action # Assign an ID to the custom action step
        uses: ./.github/actions/extract-chart-metadata
        with:
          chart-path: './k8s' # Pass the base path to your chart directory

      - name: Build and Push Docker Image to GHCR
        uses: docker/build-push-action@v5 # Using the recommended action
        with:
          context: ./app
          push: true
          # Use the dynamic app_version from Chart.yaml for the Docker image tag
          tags: ghcr.io/${{ github.repository_owner }}/flask-app:${{ steps.extract_metadata_action.outputs.app_version }}
          load: false
          no-cache: false
          pull: false

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.18.0

      - name: Package & Push Helm Chart to GHCR OCI
        run: |
          CHART_DIR="./k8s/helm-charts/${{ steps.extract_metadata_action.outputs.chart_directory }}"
          CHART_NAME="${{ steps.extract_metadata_action.outputs.name }}"
          CHART_VERSION="${{ steps.extract_metadata_action.outputs.base_version }}"

          EXPECTED_CHART_PACKAGE_FILENAME="${CHART_NAME}-${CHART_VERSION}.tgz"

          echo "Packaging Helm chart from: $CHART_DIR"
          echo "Expected packaged filename: $EXPECTED_CHART_PACKAGE_FILENAME"

          helm package "$CHART_DIR" --destination .

          if [ ! -f "$EXPECTED_CHART_PACKAGE_FILENAME" ]; then
            echo "Error: Helm package '$EXPECTED_CHART_PACKAGE_FILENAME' not found after packaging."
            exit 1
          fi

          GHCR_OCI_TARGET="oci://ghcr.io/${{ github.repository_owner }}"
          echo "Pushing Helm chart '$EXPECTED_CHART_PACKAGE_FILENAME' to GHCR OCI Repository: $GHCR_OCI_TARGET"
          helm push "$EXPECTED_CHART_PACKAGE_FILENAME" "$GHCR_OCI_TARGET" --debug
        shell: bash


      - name: Terraform Init
        working-directory: infra/terraform
        run: terraform init

      - name: Terraform Apply with dynamic vars
        working-directory: infra/terraform
        run: |
          terraform apply -auto-approve \
            -var="k3d_cluster_name=ci-k3d-cluster-${{ github.run_id }}" \
            -var="github_repo_owner=${{ needs.build-and-publish.outputs.repository_owner }}" \
            -var="helm_chart_name=${{ needs.build-and-publish.outputs.chart_name }}" \
            -var="helm_chart_version=${{ needs.build-and-publish.outputs.base_chart_version }}" \
            -var="docker_image_tag=${{ needs.build-and-publish.outputs.image_tag }}" \
            -var="docker_image_repo=ghcr.io"
        shell: bash